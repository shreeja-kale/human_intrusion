import cv2
import os
import time
import gc

# --- Global Paths ---
output_folder = "/home/root/human_images/"
os.makedirs(output_folder, exist_ok=True)

# --- Load MobileNet SSD ---
prototxt_path = "mobilenet_ssd/MobileNetSSD_deploy.prototxt"
model_path = "mobilenet_ssd/MobileNetSSD_deploy.caffemodel"
net = cv2.dnn.readNetFromCaffe(prototxt_path, model_path)

# --- Object Classes ---
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
           "bottle", "bus", "car", "cat", "chair",
           "cow", "diningtable", "dog", "horse",
           "motorbike", "person", "pottedplant", "sheep",
           "sofa", "train", "tvmonitor"]

# --- RTSP Camera ---
RTSP_URL = "rtsp://vmukti:vmukti%23907@192.168.1.88/1"
cam = cv2.VideoCapture(RTSP_URL, cv2.CAP_FFMPEG)
cam.set(cv2.CAP_PROP_BUFFERSIZE, 1)

img_counter = 0
capture_interval = 60  # seconds
last_capture_time = time.time()

# --- Main Loop ---
while True:
    ret, frame = cam.read()
    if not ret or frame is None:
        print("[⚠️] Frame not received. Reconnecting...")
        cam.release()
        time.sleep(2)
        cam = cv2.VideoCapture(RTSP_URL, cv2.CAP_FFMPEG)
        cam.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        continue

    frame = cv2.resize(frame, (960, 540))
    cv2.imshow('📷 Cargo Monitoring', frame)

    current_time = time.time()
    if current_time - last_capture_time >= capture_interval:
        (h, w) = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 0.007843, (300, 300), 127.5)
        net.setInput(blob)
        detections = net.forward()

        found_human = False
        for i in range(detections.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.05:
                idx = int(detections[0, 0, i, 1])
                if CLASSES[idx] == "person":
                    found_human = True
                    box = detections[0, 0, i, 3:7] * [w, h, w, h]
                    (startX, startY, endX, endY) = box.astype("int")
                    if (endX - startX) > 50 and (endY - startY) > 50:
                        cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 255, 0), 2)
                        label = f"Person: {confidence * 100:.2f}%"
                        cv2.putText(frame, label, (startX, startY - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        if found_human:
            img_name = f"human_capture_{img_counter}.jpg"
            save_path = os.path.join(output_folder, img_name)
            cv2.imwrite(save_path, frame)
            print(f"[🚨] Human detected! Image saved: {save_path}")

            # Step 1: Show popup with "Human Detected" and wait for "s" key (show)
            popup_img = frame.copy()
            cv2.putText(popup_img, "🚨 Human Detected!", (20, 50),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 0, 255), 3)
            cv2.putText(popup_img, "Press 's' to SHOW image or wait 10 sec...", (20, 100),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)

            cv2.imshow("ALERT", popup_img)
            start = time.time()
            key = -1
            while (time.time() - start) < 10:
                key = cv2.waitKey(1000)
                if key == ord('s'):
                    break

            cv2.destroyWindow("ALERT")

            # Step 2: If user pressed 's', show full screen image
            if key == ord('s'):
                alert_img = cv2.imread(save_path)
                cv2.namedWindow("HUMAN CAPTURE", cv2.WINDOW_NORMAL)
                cv2.setWindowProperty("HUMAN CAPTURE", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
                cv2.imshow("HUMAN CAPTURE", alert_img)
                cv2.waitKey(30000)
                cv2.destroyWindow("HUMAN CAPTURE")

            img_counter += 1
        else:
            print("[ℹ️] No human detected.")

        last_capture_time = current_time
        del blob, detections
        gc.collect()

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# --- Cleanup ---
cam.release()
cv2.destroyAllWindows()
