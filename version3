import cv2
import os
import time
import gc
import tkinter as tk
from PIL import Image, ImageTk

# --- Global Paths ---
output_folder = "/home/root/human_images/"
os.makedirs(output_folder, exist_ok=True)

# --- Load MobileNet SSD ---
prototxt_path = "mobilenet_ssd/MobileNetSSD_deploy.prototxt"
model_path = "mobilenet_ssd/MobileNetSSD_deploy.caffemodel"
net = cv2.dnn.readNetFromCaffe(prototxt_path, model_path)

# --- Object Classes ---
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
           "bottle", "bus", "car", "cat", "chair",
           "cow", "diningtable", "dog", "horse",
           "motorbike", "person", "pottedplant", "sheep",
           "sofa", "train", "tvmonitor"]

# --- RTSP Camera ---
RTSP_URL = "rtsp://vmukti:vmukti%23907@192.168.1.88/1"
cam = cv2.VideoCapture(RTSP_URL, cv2.CAP_FFMPEG)
cam.set(cv2.CAP_PROP_BUFFERSIZE, 1)

capture_interval = 60  # seconds
last_capture_time = time.time()

# --- GUI Popup Function ---
def show_popup(frame):
    # Save temporary image to disk
    temp_path = "/tmp/current_frame.jpg"
    cv2.imwrite(temp_path, frame)

    # Initialize GUI
    root = tk.Tk()
    root.withdraw()

    popup = tk.Toplevel()
    popup.title("Human Intrusion Alert")
    popup.geometry("700x400+400+200")
    popup.attributes("-topmost", True)

    image = Image.open(temp_path)
    image = image.resize((640, 360))
    photo = ImageTk.PhotoImage(image)

    label = tk.Label(popup, image=photo)
    label.image = photo
    label.pack()

    popup.after(30000, lambda: (popup.destroy(), root.quit()))
    root.mainloop()

# --- Main Loop ---
while True:
    ret, frame = cam.read()
    if not ret or frame is None:
        print("[⚠️] Frame not received, reconnecting...")
        cam.release()
        time.sleep(2)
        cam = cv2.VideoCapture(RTSP_URL, cv2.CAP_FFMPEG)
        cam.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        continue

    current_time = time.time()
    if current_time - last_capture_time >= capture_interval:
        (h, w) = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)),
                                     0.007843, (300, 300), 127.5)
        net.setInput(blob)
        detections = net.forward()

        found_human = False
        for i in range(detections.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.05:
                idx = int(detections[0, 0, i, 1])
                if CLASSES[idx] == "person":
                    found_human = True
                    print(f"[✅] Human detected with {confidence:.2f} confidence.")
                    break  # Break on first detection

        if found_human:
            show_popup(frame.copy())

        else:
            print("[ℹ️] No human detected.")

        last_capture_time = current_time
        del blob, detections
        gc.collect()

    # Optional: small sleep to avoid tight loop
    time.sleep(0.1)

# --- Cleanup ---
cam.release()
