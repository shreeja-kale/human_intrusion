import cv2
import os
import time
import gc
import numpy as np

# --- Load MobileNet SSD ---
prototxt_path = "mobilenet_ssd/MobileNetSSD_deploy.prototxt"
model_path = "mobilenet_ssd/MobileNetSSD_deploy.caffemodel"
net = cv2.dnn.readNetFromCaffe(prototxt_path, model_path)

# --- Object classes ---
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
           "bottle", "bus", "car", "cat", "chair", "cow",
           "diningtable", "dog", "horse", "motorbike", "person",
           "pottedplant", "sheep", "sofa", "train", "tvmonitor"]

# --- RTSP Camera ---
cam = cv2.VideoCapture("rtsp://vmukti:vmukti%23907@192.168.1.88/1", cv2.CAP_FFMPEG)
cam.set(cv2.CAP_PROP_BUFFERSIZE, 1)

img_counter = 0
capture_interval = 10
last_capture_time = time.time()
camera_covered_alert_shown = False

button_top_left = (100, 120)
button_bottom_right = (300, 170)
clicked_inside = False

def mouse_callback(event, x, y, flags, param):
    global clicked_inside
    if event == cv2.EVENT_LBUTTONDOWN:
        if button_top_left[0] <= x <= button_bottom_right[0] and button_top_left[1] <= y <= button_bottom_right[1]:
            clicked_inside = True

def safe_destroy(window_name):
    if cv2.getWindowProperty(window_name, cv2.WND_PROP_VISIBLE) >= 1:
        cv2.destroyWindow(window_name)

def sharpness_score(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    lap = cv2.Laplacian(gray, cv2.CV_64F)
    return lap.var()

def color_variance(image):
    return np.std(image)

# --- Main Loop ---
while True:
    ret, frame = cam.read()
    if not ret:
        print("Frame not received.")
        break

    frame = cv2.resize(frame, (960, 540))
    cv2.imshow("Cargo Monitoring", frame)

    # --- Check camera cover ---
    sharp = sharpness_score(frame)
    color_std = color_variance(frame)

    if sharp < 90 and color_std < 90:
        if not camera_covered_alert_shown:
            print("[ðŸš¨] Camera may be covered.")
            popup = 255 * np.ones((200, 400, 3), dtype=np.uint8)
            cv2.putText(popup, "Camera May Be Covered!", (30, 100),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)
            cv2.namedWindow("CAMERA COVER ALERT")
            start = time.time()
            while time.time() - start < 5:
                if cv2.getWindowProperty("CAMERA COVER ALERT", cv2.WND_PROP_VISIBLE) < 1:
                    break
                cv2.imshow("CAMERA COVER ALERT", popup)
                if cv2.waitKey(100) & 0xFF == ord('q'):
                    break
            safe_destroy("CAMERA COVER ALERT")
            camera_covered_alert_shown = True
    else:
        camera_covered_alert_shown = False

    # --- Human detection ---
    current_time = time.time()
    if current_time - last_capture_time >= capture_interval:
        (h, w) = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)),
                                     0.007843, (300, 300), 127.5)
        net.setInput(blob)
        detections = net.forward()
        found_human = False
        person_count = 0

        for i in range(detections.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.05:
                idx = int(detections[0, 0, i, 1])
                if CLASSES[idx] == "person":
                    person_count += 1
                    found_human = True
                    box = detections[0, 0, i, 3:7] * [w, h, w, h]
                    (startX, startY, endX, endY) = box.astype("int")
                    if (endX - startX) > 50 and (endY - startY) > 50:
                        cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 255, 0), 2)
                        label = f"Person: {confidence * 100:.2f}%"
                        cv2.putText(frame, label, (startX, startY - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        if found_human:
            img_name = f"image_capture_{img_counter}.jpg"
            cv2.imwrite(img_name, frame)
            print(f"Human Detected. Person Count: {person_count}. Image saved: {img_name}")

            # --- Create popup ---
            popup = 255 * np.ones((200, 400, 3), dtype=np.uint8)
            cv2.putText(popup, "Human Detected!", (80, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)
            cv2.putText(popup, f"Count: {person_count}", (100, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)
            cv2.rectangle(popup, button_top_left, button_bottom_right, (0, 255, 0), -1)
            cv2.putText(popup, "SHOW", (button_top_left[0] + 50, button_top_left[1] + 35),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 0), 2)

            clicked_inside = False
            cv2.namedWindow("ALERT")
            cv2.setMouseCallback("ALERT", mouse_callback)

            popup_start = time.time()
            while time.time() - popup_start < 10:
                if cv2.getWindowProperty("ALERT", cv2.WND_PROP_VISIBLE) < 1:
                    break
                cv2.imshow("ALERT", popup)
                if clicked_inside:
                    safe_destroy("ALERT")
                    full_img = cv2.imread(img_name)
                    cv2.namedWindow("HUMAN CAPTURE", cv2.WINDOW_NORMAL)
                    cv2.resizeWindow("HUMAN CAPTURE", 960, 540)
                    cv2.imshow("HUMAN CAPTURE", full_img)
                    time.sleep(5)
                    safe_destroy("HUMAN CAPTURE")
                    break
                if cv2.waitKey(100) & 0xFF == ord('q'):
                    break

            safe_destroy("ALERT")
            img_counter += 1

        else:
            print("No human detected.")

        last_capture_time = current_time
        del blob, detections
        gc.collect()

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cam.release()
cv2.destroyAllWindows()
